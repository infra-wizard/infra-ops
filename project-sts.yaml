apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: project-service
  namespace: kepler-app-dev
  labels:
    app: project-service
    argocd.argoproj.io/instance: project-service
spec:
  serviceName: project-service-headless
  replicas: 1
  selector:
    matchLabels:
      app: project-service
  template:
    metadata:
      labels:
        app: project-service
      annotations:
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-cds-api-key.yaml: "kv/customer-data-service/client/quality-flow/api-key"
        vault.hashicorp.com/agent-inject-secret-env.properties: "secret/kepler-app/env"
        vault.hashicorp.com/agent-inject-template-cds-api-key.yaml: |
          {{- with secret "kv/customer-data-service/client/quality-flow/api-key" -}}
          {{ .Data | toYAML }}
          {{- end }}
        vault.hashicorp.com/agent-inject-template-env.properties: |
          {{- with secret "secret/kepler-app/env" -}}
          {{- range $k, $v := .Data.data }}
          export {{ $k }}="{{ $v }}"
          {{- end }}
          {{- end }}
        vault.hashicorp.com/agent-limits-ephemeral: "1G"
        vault.hashicorp.com/auth-path: "auth/kubernetes"
        vault.hashicorp.com/log-level: "debug"
        vault.hashicorp.com/role: "kepler-app"
        vault.hashicorp.com/secret-volume-path: "/app/config"
        vault.hashicorp.com/service: "http://vault.adap:8200"
    spec:
      serviceAccountName: kepler-app
      volumes:
        - name: skywalking-agent
          emptyDir: {}
        - name: pyroscope-agent
          emptyDir: {}
      initContainers:
        # SkyWalking agent init container
        - name: skywalking-agent-init
          image: apache/skywalking-java-agent:8.11.0-java11
          command:
            - /bin/sh
          args:
            - -c
            - cp -R /skywalking/agent /agent/
          volumeMounts:
            - name: skywalking-agent
              mountPath: /agent
          imagePullPolicy: IfNotPresent
        
        # Custom Pyroscope agent init container
        - name: pyroscope-agent-init
          image: 411719562396.dkr.ecr.us-east-1.amazonaws.com/kepler-development/pyroscope-init:v0.13.0
          volumeMounts:
            - name: pyroscope-agent
              mountPath: /shared
          imagePullPolicy: IfNotPresent
          
      containers:
        - name: project-service
          image: 411719562396.dkr.ecr.us-east-1.amazonaws.com/kepler-development/project-service:0388a63851e2ee395b85ccd1d3527b942cbb6ab0
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: jmx
              containerPort: 9999
              protocol: TCP
          env:
            # Combined JAVA_TOOL_OPTIONS for both agents with modern GC logging
            - name: JAVA_TOOL_OPTIONS
              value: "-javaagent:/skywalking/agent/skywalking-agent.jar -javaagent:/opt/pyroscope.jar -XX:+FlightRecorder -XX:StartFlightRecording=settings=profile -Xlog:gc*:gc.log:time,pid,tid,level,tags -XX:+UseG1GC"
            # SkyWalking configuration
            - name: SW_AGENT_NAME
              value: project-service
            - name: SW_AGENT_COLLECTOR_BACKEND_SERVICES
              value: skywalking-oap.kepler-infra:11800
            # Pyroscope configuration
            - name: PYROSCOPE_APPLICATION_NAME
              value: "project-service"
            - name: PYROSCOPE_SERVER_ADDRESS
              value: "http://pyroscope.observability.svc.cluster.local:4040"
            - name: PYROSCOPE_FORMAT
              value: "jfr"
            - name: PYROSCOPE_PROFILER_EVENT
              value: "cpu,wall,alloc,lock"
            - name: PYROSCOPE_PROFILER_ALLOC
              value: "512k"
            - name: PYROSCOPE_PROFILER_LOCK
              value: "10ms"
            # Enable memory profiling
            - name: PYROSCOPE_PROFILER_ITIMER
              value: "10ms"
            - name: PYROSCOPE_ALLOC_EVENT
              value: "true"
            - name: PYROSCOPE_LOCK_EVENT
              value: "true"
            # Pod metadata for tags (StatefulSet specific)
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: PYROSCOPE_TAGS
              value: "pod=$(POD_NAME),namespace=$(POD_NAMESPACE),node=$(NODE_NAME),environment=dev,statefulset=project-service"
            # JVM settings with modern GC logging and memory profiling
            - name: JAVA_OPTS
              value: "-Xms512m -Xmx1g -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
          resources:
            limits:
              cpu: "1"
              memory: "2G"
            requests:
              cpu: "65m"
              memory: "2G"
          volumeMounts:
            - name: skywalking-agent
              mountPath: /skywalking
            - name: pyroscope-agent
              mountPath: /opt
            # StatefulSet persistent volume mount (if needed)
            - name: data
              mountPath: /app/data
          livenessProbe:
            httpGet:
              path: /project/actuator/health/liveness
              port: http
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /project/actuator/health/readiness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /project/actuator/health/liveness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          imagePullPolicy: IfNotPresent
  # StatefulSet specific: Volume Claim Templates for persistent storage
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: project-service
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard  # Adjust based on your cluster
        resources:
          requests:
            storage: 10Gi
  # StatefulSet update strategy
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  # Pod management policy
  podManagementPolicy: OrderedReady
